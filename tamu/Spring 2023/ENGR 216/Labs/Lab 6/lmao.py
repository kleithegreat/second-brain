import pandas as pd, numpy as np, uncertainties as unc; from scipy.signal import find_peaks; files, cols = (("data/green_spring_400g.csv", unc.ufloat(0.4, 0.003)), ("data/red_spring_400g.csv", unc.ufloat(0.4, 0.003)), ("data/white_spring_300g.csv", unc.ufloat(0.3, 0.003))), ("frame_no", "timestamp", "size_px-green", "position_px_x-green", "position_px_y-green"); clean_data, isolate, find_period, find_k = (lambda df, cols: df.copy().loc[:, cols].dropna(subset="size_px-green"), lambda df, start, end: df.copy().loc[(df["timestamp"] >= start) & (df["timestamp"] <= end)], lambda df: unc.ufloat(np.mean(np.diff((times := df["timestamp"].values)[(peak_indices := find_peaks(df["position_px_y-green"].values)[0])])), np.std(np.diff(times[peak_indices])) / np.sqrt(len(np.diff(times[peak_indices])))), lambda T, m: (4 * np.pi ** 2 * m) / T ** 2); [print(f"{f} spring: {find_k(find_period((isolate if r else clean_data)(pd.read_csv(f'{m[0]}'), cols), *r) if r else clean_data(pd.read_csv(f'{m[0]}'), cols)), m[1])}") for f, m, r, s in (("Green", *files[0], (5053, 15817)), ("Red", *files[1], (5611, 23444)), ("White", *files[2], None))]